import numpy as np
import matplotlib.pyplot as plt

data_x = np.array([5, 10, 15, 20, 25, 30, 35, 40])
data_y = np.array([40, 30, 25, 40, 18, 20, 22, 15])

def lagrange_interpolation(x, data_x, data_y):
    def L(k, x):
        Lk = 1
        for i in range(len(data_x)):
            if i != k:
                Lk *= (x - data_x[i]) / (data_x[k] - data_x[i])
        return Lk

    y_interp = 0
    for k in range(len(data_x)):
        y_interp += data_y[k] * L(k, x)
    return y_interp

def newton_interpolation(x, data_x, data_y):
    def divided_diff(data_x, data_y):
        n = len(data_y)
        coef = np.zeros([n, n])
        coef[:,0] = data_y
        
        for j in range(1, n):
            for i in range(n - j):
                coef[i][j] = (coef[i + 1][j - 1] - coef[i][j - 1]) / (data_x[i + j] - data_x[i])
        return coef[0, :]
    
    def newton_poly(coef, data_x, x):
        n = len(coef) - 1
        p = coef[n]
        for k in range(1, n + 1):
            p = coef[n - k] + (x - data_x[n - k]) * p
        return p

    coef = divided_diff(data_x, data_y)
    return newton_poly(coef, data_x, x)

x_vals = np.linspace(5, 40, 400)
lagrange_vals = [lagrange_interpolation(x, data_x, data_y) for x in x_vals]
newton_vals = [newton_interpolation(x, data_x, data_y) for x in x_vals]

fig, axs = plt.subplots(2, 1, figsize=(12, 12))

axs[0].plot(x_vals, lagrange_vals, label='Lagrange Interpolation', linestyle='--')
axs[0].scatter(data_x, data_y, color='red', label='Data Points')
axs[0].set_title('Lagrange Polynomial Interpolation')
axs[0].set_xlabel('x')
axs[0].set_ylabel('y')
axs[0].legend()
axs[0].grid(True)

axs[1].plot(x_vals, newton_vals, label='Newton Interpolation', linestyle='-.')
axs[1].scatter(data_x, data_y, color='red', label='Data Points')
axs[1].set_title('Newton Polynomial Interpolation')
axs[1].set_xlabel('x')
axs[1].set_ylabel('y')
axs[1].legend()
axs[1].grid(True)

plt.tight_layout()
plt.show()
